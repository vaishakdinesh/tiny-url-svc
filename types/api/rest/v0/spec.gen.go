// Package v0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v0

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVwU7kOBD9Fat2j1HSS3PKaRuxu0KLVoiFwwhxMEklMTi2KTuBFup/H9nudCedSH2Z",
	"keZESLv8Xr33qvIFhW6NVqichfwLbNFgy8Pj5u7mLyJN/tmQNkhOYPil0CX6v25rEHIQymGNBLsEWrSW",
	"1+MfrSOhatjtEiB87wRhCflTvOJ4/jkZzuuXVyycv+sfVEjc4eP97T2+d2jdnIkUPf6tCXsMNEuseCcd",
	"5BWXFhMo0RYkjBNaQQ4vWkvkiglVioI7oWr20aBrkJhrkNV7vJJ1JNmHkJIp7Rh+GkGYsv+0Y0MHjNtQ",
	"srm7iQf3wMxpFqBTSAA/eWskHsjsG9yz8B12JD3rw0FonDM2z7Ja61piWujWayTULaraNZCvkzOy+huT",
	"iSpnlbVGK4tzaWPfD6JdcjOBg1oPQm0f72/PWz6rmFPzJUJVOoZMOV4Ez7HlQkIOPRe24W+mFApt82ft",
	"XweRdqdWe2MqTcw2mhwqbzVnHjMBJ1zQ2rPwr9j/SL0ofBp7JBvr+1W68rdqg4obATms01W6hgQMd03Q",
	"Jxv6CdLpmM4pi0FnyzhzHs4HqyLdhvAIZToHAYO4r7gpRzWRLMXgX+lyO2iCKiBxY2RIsVbZq/Vww/D6",
	"p98JK8jht+w43dl+tLOFuQrCT7nH00FEfhgNtucDY2cddRisjkkK4lys/vg5fPdpXSLcFQVaW3VSbkez",
	"zL3oaQij7dqW03Yk8siXcCL76kj+i9td9FJidHcKdB3eTzw9wkW9pFY1i7M4dTfWDt5OBLucI01aKmew",
	"PqCXse6HCH1Y+Avq+i79Nqx0p8oTNa8XmdW4MBGEpSAsXFyfhRSowtL0/w2ipQsz4RYkW68uzkg2QjuF",
	"+EWkmzCcsDOceIsOyUL+dNrlG25PMjfuDvwShTysKkhAcb/CISZ7NrnJqMPjh+hi823TXMH8c/Mc+CP1",
	"A7HwDYPMO9+RtH0Bu+fd9wAAAP//QlK7B1YIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
