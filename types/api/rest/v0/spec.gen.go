// Package v0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v0

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVwW7bOBD9FWJ2j4LljXPSaRNksQiaQ5EmhyLIgaXGEhOJZIYjI0agfy9IWrFkCfCl",
	"BXoyTXHmvXlvhvwAZVtnDRr2UHyAVzW2Mi6vvt7+R2QprB1Zh8Qa4xdlSwy/vHcIBWjDWCFBn0GL3stq",
	"/NEzaVNB32dA+NZpwhKKp5TieP45G87bHy+oOOT6Hw2SZHy8v7vHtw49z5l01IQffJeta0J4zex8keeV",
	"tVWDK2XbgKLNHZqKayg22RliIeNZNt5Z43FOB9+dJnzQ7ZICGVSHHOWDNvvH+7vzMs0isjHGnGeI12Zr",
	"k0uGpYqiYSt1AwXspPa1fHWlNujrf6uwHTXqMyjRK9KOtTVQBPPF1pLwtSVGo00lpEgEWHOUOlAKW+Ib",
	"0k6rYOcOyaf43Xq1DlmtQyOdhgI2q/VqAxk4yXUUKx+KizraZO+UxSC6F1JwgOuoEVuyreAahTauY4gY",
	"JEPEbTmKSWQpdc61LfeDJmgiknSu0SrG5S8+wA3dH1Z/E26hgL/y43jkh9nIFxozCj/lnk5HEaUYShUH",
	"PjC2manD6HtqqyjOxfqf38P30LpLhDul0Ptt1zT7T8KlkEH0VexM37WtpP1I5JEv8UT+0VHzBfd98rLB",
	"5O4U6CbuTzw9wiW9GmuqmPTU3RQ7eDsR7HKONCmpnMGGBr1Mcb9E6M8bc0HdUKWxLLa2M+WJmjeLzCpc",
	"mAjCUhMq9nECVKPRsGAb/w2irRZmghck26wvzkg2QjuF+EOkmzCcsHOSZIuM5KF4Oq3yFfcnPTeuDsIl",
	"CkW8qiADI8N9DqmzZ5ObjSo8vkMXV9+v6muYvzbPkT/SbiAWnzDIg/MdNX6noH/ufwYAAP//FVRovZcH",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
