// Package v0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v0

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7STwW7bMAxAf0XgdjTibL35tA0YhgI5DFl7KnrQZMZmZ0sqRQcNCv/7QNleXSRATjtZ",
	"sETy6ZF6BRf6GDx6SVC9QnIt9jYvv/68/c4cWNeRQ0QWwrzjQo36lVNEqIC8YIMMYwE9pmSb9WYSJt/A",
	"OBbA+DwQYw3Vw5Ti7fxjsZwPv5/Qieb6gR7ZCt7vd3t8HjDJOcnAnX7wxfax0/BWJKaqLJsQmg43LvRa",
	"hfwOfSMtVDfFFTDNeJUmxeATnuPgSyTGO+ovGSigmXPUd+RP9/vddU1nEcW6xjmnxpM/hKlLXqzL0rC3",
	"1EEFR0uptX9iTR5T+6XR39nRWECNyTFFoeCh0uabQ2CT2sCCnnxjrJkAhCSrViT9ZX4hH8lpO4/IaYo/",
	"bjdbzRoiehsJKrjZbDc3UEC00mZZ5XK57DFM7X1PsUhPxhrRcgN35sChN9KiIR8HgVyDrUbc1quYCZan",
	"yfkW6tPiBH2uZGPsyOW48ilpuWX6dfWR8QAVfCjfnkc5v43ywmBm8e/Zp9NZojXLVc3MA+s2Cw+Y+z6N",
	"VZbzefvp//DOo3sJeHAOUzoMXXf6B1wbq9I3eTLT0PeWTyvJq75MKROyDgFUD/PjhNJGKo9bGB/HvwEA",
	"AP//87+tIm0EAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
